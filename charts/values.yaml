# -- Sourcebot Helm Chart Values

# -- Override the name of the chart.
nameOverride: ""

# -- Override the full name of the chart.
fullnameOverride: ""

# -- Set the number of replicas for the deployment.
replicaCount: 1

# -- Configure the container image.
image:
  # -- Container image repository.
  repository: ghcr.io/sourcebot-dev/sourcebot
  # -- Container image tag.
  # tag: ""
  # -- Container image digest (used instead of tag if set).
  # digest: ""
  # -- Image pull policy.
  pullPolicy: IfNotPresent

# -- Configure image pull secrets for private registries.
imagePullSecrets: []

# -- Override the default command of the container.
command: []

# -- Override the default arguments of the container.
args: []

# -- Configure the database secret by providing database.secretName and database.secretKey to use a Kubernetes secret.
database: {}
# secretName: sourcebot-database-url
# secretKey: url

# -- Configure the Redis secret by providing redis.secretName and redis.secretKey to use a Kubernetes secret.
redis: {}
# secretName: sourcebot-redis-url
# secretKey: url

# -- Configure the enterprise license key secret by providing license.secretName and license.secretKey to use a Kubernetes secret.
license: {}
# secretName: sourcebot-ee-license-key
# secretKey: key

# -- Set environment variables from Kubernetes secrets.
envSecrets: []
# - secretName: sourcebot-github-token
#   secretKey: token
#   envName: GITHUB_TOKEN

# -- Set additional environment variables.
envs: []
# # Disable sourcebot telemetry.
# - name: SOURCEBOT_TELEMETRY_DISABLED
#   value: "1"

# -- Configure Sourcebot-specific application settings.
config:
  # Schema version of the Sourcebot configuration.
  $schema: https://raw.githubusercontent.com/sourcebot-dev/sourcebot/main/schemas/v3/index.json
  connections: {}
  # github-repos:
  #   type: github
  #   token:
  #     env: GITHUB_TOKEN
  #   repos:
  #     - sourcebot/sourcebot
  #     - sourcebot/sourcebot-plugins
  settings: {}
  # reindexIntervalMs: 86400000
  # enablePublicAccess: true

# -- Configure the ServiceAccount.
serviceAccount:
  # -- Create a new ServiceAccount.
  create: true
  # -- Use an existing ServiceAccount (if set).
  name: ""
  # -- Add annotations to the ServiceAccount.
  annotations: {}
  # -- Enable or disable automatic ServiceAccount mounting.
  automount: false

# -- Set the pod-level security context.
podSecurityContext: {}
# runAsUser: 1000
# runAsGroup: 1000
# runAsNonRoot: true
# fsGroup: 1000

# -- Set the container-level security context.
containerSecurityContext: {}
# allowPrivilegeEscalation: false
# privileged: false
# readOnlyRootFilesystem: true
# runAsUser: 1000
# runAsGroup: 1000
# capabilities:
#   drop:
#     - ALL
# seccompProfile:
#   type: RuntimeDefault

# -- Configure the Sourcebot Kubernetes service.
service:
  # -- Type of the Kubernetes service (e.g., ClusterIP, NodePort, LoadBalancer).
  type: ClusterIP
  # -- Internal container port.
  containerPort: 3000
  # -- External service port.
  port: 3000
  # -- Service annotations.
  annotations: {}

# -- Configure ingress for Sourcebot.
ingress:
  # -- Enable or disable ingress.
  enabled: false
  # -- Ingress class name.
  className: ""
  # -- Ingress annotations.
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"

  # -- List of hostnames and paths for ingress rules. The first host will be used as the default host.
  hosts: []
  # - host: chart-example.local
  #  paths:
  #     - path: /
  #       pathType: ImplementationSpecific

  # -- TLS settings for ingress.
  tls: []
  # - hosts:
  #     - chart-example.local
  #   secretName: chart-example-tls

# -- Configure init containers to run before the main container.
initContainers: []
# - name: sleeper
#   image: busybox
#   args:
#     - sleep
#     - "10"

# -- Configure resource requests and limits for the container.
resources: {}
## It is recommended to set resources explicitly in production environments.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# -- Liveness probe to check if the container is alive.
livenessProbe:
  # -- Http GET request to check if the container is alive.
  httpGet:
    # -- Path to check.
    path: /
    # -- Port to check.
    port: http
  # -- Initial delay before the first probe.
  initialDelaySeconds: 10
  # -- Frequency of the probe.
  periodSeconds: 10
  # -- Number of consecutive failures before marking the container as unhealthy.
  failureThreshold: 5

# -- Readiness probe to check if the container is ready to serve traffic.
readinessProbe:
  # -- Http GET request to check if the container is ready.
  httpGet:
    # -- Path to check.
    path: /
    # -- Port to check.
    port: http
  # -- Initial delay before the first probe.
  initialDelaySeconds: 10
  # -- Frequency of the probe.
  periodSeconds: 10
  # -- Number of consecutive failures before marking the container as not ready.
  failureThreshold: 5

# -- Startup probe to check if the container has started successfully.
startupProbe:
  # -- Http GET request to check if the container has started.
  httpGet:
    # -- Path to check.
    path: /
    # -- Port to check.
    port: http
  # -- Number of seconds to wait before starting the probe.
  failureThreshold: 30
  # -- Initial delay before the first probe.
  periodSeconds: 30

# -- Define additional volumes.
# See: https://kubernetes.io/docs/concepts/storage/volumes/
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Define volume mounts for the container.
# See: https://kubernetes.io/docs/concepts/storage/volumes/
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Configure Pod Disruption Budget.
podDisruptionBudget:
  # -- Enable Pod Disruption Budget.
  enabled: true
  # -- Minimum number of pods that must be available.
  minAvailable: 1
  # -- Maximum number of pods that can be unavailable.
  maxUnavailable: 1

# -- Add annotations to the pod metadata.
podAnnotations: {}
# prometheus.io/scrape: "true"
# prometheus.io/path: "/metrics"
# prometheus.io/port: "9102"

# -- Add extra labels to all resources.
additionalLabels: {}
# team: sourcebot

# -- Set node selector constraints.
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# -- Set tolerations for pod scheduling.
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []
# - effect: NoSchedule
#   key: "key"
#   operator: Equal
#   value: "value"

# -- Set affinity rules for pod scheduling.
# Defaults to soft anti-affinity if not set.
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
affinity: {}

# -- Set the priority class name for pods.
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
priorityClassName: ""

# -- Configure the Bitnami PostgreSQL sub-chart.
# See: https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  enabled: false
